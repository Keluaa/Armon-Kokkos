
if(Kokkos_ENABLE_CUDA)
    set(EXE_NAME "armon_cuda.exe")
    set(EXE_NAME_2D "armon_cuda_2D.exe")
elseif(Kokkos_ENABLE_HIP)
    set(EXE_NAME "armon_hip.exe")
    set(EXE_NAME_2D "armon_hip_2D.exe")
elseif(Kokkos_ENABLE_OPENMP)
    set(EXE_NAME "armon_openmp.exe")
    set(EXE_NAME_2D "armon_openmp_2D.exe")
else()
    set(EXE_NAME "armon_serial.exe")
    set(EXE_NAME_2D "armon_serial_2D.exe")
endif()

add_executable(${EXE_NAME} "armon.cpp")
target_link_libraries(${EXE_NAME} PRIVATE Kokkos::kokkos)
target_compile_options(${EXE_NAME} PRIVATE -ffast-math)

add_executable(${EXE_NAME_2D} "armon_2D.cpp")
target_link_libraries(${EXE_NAME_2D} PRIVATE Kokkos::kokkos)
target_compile_options(${EXE_NAME_2D} PRIVATE -ffast-math)

#add_library(cmp_cpp_jl SHARED "cmp_cpp_jl.cpp")
#target_link_libraries(cmp_cpp_jl PRIVATE Kokkos::kokkos)
#target_compile_options(cmp_cpp_jl PRIVATE -ffast-math -fPIC)

if(USE_SINGLE_PRECISION)
    target_compile_definitions(${EXE_NAME} PRIVATE USE_SINGLE_PRECISION=1)
    target_compile_definitions(${EXE_NAME_2D} PRIVATE USE_SINGLE_PRECISION=1)
#    target_compile_definitions(cmp_cpp_jl PRIVATE USE_SINGLE_PRECISION=1)
else()
    target_compile_definitions(${EXE_NAME} PRIVATE USE_SINGLE_PRECISION=0)
    target_compile_definitions(${EXE_NAME_2D} PRIVATE USE_SINGLE_PRECISION=0)
#    target_compile_definitions(cmp_cpp_jl PRIVATE USE_SINGLE_PRECISION=0)
endif()
